{"version":3,"sources":["sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","sortingAlgorithms/heapSort.js","components/visualizer/AnimationHandler.js","components/nav/AlgoButton.jsx","components/nav/Navigation.jsx","components/visualizer/SortingVisualizer.jsx","sortingAlgorithms/bubbleSort.js","App.js","index.js"],"names":["mergeSort","array","anims","length","auxArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","midIdx","Math","floor","k","i","j","anim","comparison","swap","push","doMerge","getQuickSortAnims","arr","low","high","quickSortHelper","partitionIndex","pivot","holder","partition","getHeapSortAnims","n","heapify","heapSortHelper","largest","l","r","runAnimation","timeIncrements","arrayBars","document","getElementsByClassName","barOneCompare","barTwoCompare","barOneStyle","item","style","barTwoStyle","setTimeout","barOneSwap","barTwoSwap","temp","height","backgroundColor","round","AlgoButton","props","Dropdown","Item","as","onClick","fn","title","Navigation","className","DropdownButton","id","disabled","busy","updateState","Button","variant","refresh","run","SortingVisualizer","useState","sorting","setSorting","sortingArr","setSortingArr","sortingState","setSortingState","generateArray","min","max","random","startResetTimer","useEffect","getMergeSortAnims","barOneIdx","newHeight","runMSAnimation","runMergeSort","runQuickSort","runHeapSort","swapped","getBubbleSortAnims","runBubbleSort","map","value","idx","key","App","ReactDOM","render","getElementById"],"mappings":"+OAEe,SAASA,EAAUC,GAC9B,IAAMC,EAAQ,GACd,GAAID,EAAME,QAAU,EAAG,OAAOF,EAC9B,IAAMG,EAAWH,EAAMI,QAEvB,OAGJ,SAASC,EAAiBC,EAAWC,EAAUC,EAAQL,EAAUF,GAC7D,GAAGM,IAAaC,EAAQ,OACxB,IAAMC,EAASC,KAAKC,OAAOJ,EAAWC,GAAU,GAChDH,EAAgBF,EAAUI,EAAUE,EAAQH,EAAWL,GACvDI,EAAgBF,EAAUM,EAAS,EAAGD,EAAQF,EAAWL,GAI7D,SAAiBK,EAAWC,EAAUE,EAAQD,EAAQL,EAAUF,GAC5D,IAAIW,EAAIL,EACJM,EAAIN,EACJO,EAAIL,EAAS,EACjB,KAAMI,GAAKJ,GAAUK,GAAKN,GAAQ,CAC9B,IAAMO,EAAO,GACbA,EAAKC,WAAa,CAACH,EAAGC,GACnBX,EAASU,IAAMV,EAASW,IACvBC,EAAKE,KAAO,CAACL,EAAGT,EAASU,IACzBP,EAAUM,KAAOT,EAASU,OAE1BE,EAAKE,KAAO,CAACL,EAAGT,EAASW,IACzBR,EAAUM,KAAOT,EAASW,MAE9Bb,EAAMiB,KAAKH,GAEf,KAAOF,GAAKJ,GACRR,EAAMiB,KAAK,CACPF,WAAY,CAACH,EAAGA,GAChBI,KAAM,CAACL,EAAGT,EAASU,MAEvBP,EAAUM,KAAOT,EAASU,KAE9B,KAAOC,GAAKN,GACRP,EAAMiB,KAAK,CACPF,WAAY,CAACF,EAAGA,GAChBG,KAAM,CAACL,EAAGT,EAASW,MAEvBR,EAAUM,KAAOT,EAASW,KA/B9BK,CAAQb,EAAWC,EAAUE,EAAQD,EAAQL,EAAUF,GATvDI,CAAgBL,EAAO,EAAGA,EAAME,OAAS,EAAGC,EAAUF,GAC/CA,ECLI,SAASmB,EAAkBC,EAAKC,EAAKC,GAChD,IAAMtB,EAAQ,GACd,OAAGoB,EAAInB,QAAU,EAAUmB,GAK/B,SAASG,EAAgBH,EAAKC,EAAKC,EAAMtB,GACrC,GAAGqB,EAAMC,EAAM,CACX,IAAME,EAMd,SAAmBJ,EAAKC,EAAKC,EAAMtB,GAG/B,IAFA,IAAIyB,EAAQL,EAAIE,GACZV,EAAIS,EAAM,EACLR,EAAIQ,EAAKR,EAAIS,EAAMT,IAAI,CAC5B,IAAMC,EAAO,CACbA,KAAY,MAEZ,GADAA,EAAKC,WAAa,CAACF,EAAGS,GACnBF,EAAIP,GAAKY,EAAM,CACdb,IACAE,EAAKE,KAAO,CAACJ,EAAGC,GAChB,IAAIa,EAASN,EAAIR,GACjBQ,EAAIR,GAAKQ,EAAIP,GACbO,EAAIP,GAAKa,EAEb1B,EAAMiB,KAAKH,GAGf,IAAMA,EAAO,GACbA,EAAKC,WAAa,CAACH,EAAI,EAAGU,GAC1BR,EAAKE,KAAO,CAACJ,EAAI,EAAGU,GACpBtB,EAAMiB,KAAKH,GAEX,IAAIY,EAASN,EAAIR,EAAI,GAIrB,OAHAQ,EAAIR,EAAI,GAAKQ,EAAIE,GACjBF,EAAIE,GAAQI,EAELd,EAAI,EAhCgBe,CAAUP,EAAKC,EAAKC,EAAMtB,GACjDuB,EAAgBH,EAAKC,EAAMG,EAAiB,EAAGxB,GAC/CuB,EAAgBH,EAAKI,EAAiB,EAAGF,EAAMtB,IARnDuB,CAAgBH,EAAKC,EAAKC,EAAMtB,GACzBA,GCJI,SAAS4B,EAAiBR,GACrC,IAAMpB,EAAQ,GACd,OAAGoB,EAAInB,QAAU,EAAUmB,GAK/B,SAAwBA,EAAKpB,GAGzB,IAFA,IAAM6B,EAAIT,EAAInB,OAENW,EAAIiB,EAAI,EAAI,EAAGjB,GAAK,EAAGA,IAC3BkB,EAAQV,EAAKS,EAAGjB,EAAGZ,GAEvB,IAAI,IAAIY,EAAIiB,EAAI,EAAGjB,EAAI,EAAGA,IAAI,CAC1B,IAAME,EAAO,GACbA,EAAKC,WAAa,CAAC,EAAGH,GAEtB,IAAIc,EAASN,EAAI,GACjBN,EAAKE,KAAO,CAAC,EAAGJ,GAChBQ,EAAI,GAAKA,EAAIR,GACbQ,EAAIR,GAAKc,EACT1B,EAAMiB,KAAKH,GAEXgB,EAAQV,EAAKR,EAAG,EAAGZ,IApBvB+B,CAAeX,EAAKpB,GACbA,GAuBX,SAAS8B,EAAQV,EAAKS,EAAGjB,EAAGZ,GACxB,IAAIgC,EAAUpB,EACRqB,EAAI,EAAIrB,EAAI,EACZsB,EAAI,EAAItB,EAAI,EAEZE,EAAO,CACbA,WAAkB,CAAC,EAAE,GACrBA,KAAY,MAcZ,GAZGmB,EAAIJ,GAEAT,EAAIa,GAAKb,EAAIY,KAChBA,EAAUC,GAGXC,EAAIL,GAEAT,EAAIc,GAAKd,EAAIY,KAChBA,EAAUE,GAGXF,IAAYpB,EAAG,CACd,IAAMc,EAASN,EAAIR,GACnBE,EAAKE,KAAO,CAACJ,EAAGoB,GAChBZ,EAAIR,GAAKQ,EAAIY,GACbZ,EAAIY,GAAWN,EAEf1B,EAAMiB,KAAKH,GAEXgB,EAAQV,EAAKS,EAAGG,EAAShC,ICpDlB,SAASmC,EAAanC,EAAOoC,GACxC,IADyD,IAAD,WAC/CxB,GACL,IAAMyB,EAAYC,SAASC,uBAAuB,aAFE,cAGbvC,EAAMY,GAAGG,WAHI,GAG7CyB,EAH6C,KAG9BC,EAH8B,KAIhDC,EAAcL,EAAUM,KAAKH,GAAeI,MAC5CC,EAAcR,EAAUM,KAAKF,GAAeG,MAChDE,YAAW,WACP,GAAoB,MAAjB9C,EAAMY,GAAGI,KAAc,CAAC,IAAD,cACWhB,EAAMY,GAAGI,KADpB,GACf+B,EADe,KACHC,EADG,KAEtBN,EAAcL,EAAUM,KAAKI,GAAYH,MACzCC,EAAcR,EAAUM,KAAKK,GAAYJ,MACzC,IAAMK,EAAOP,EAAYQ,OACzBR,EAAYQ,OAASL,EAAYK,OACjCL,EAAYK,OAASD,EAEzBP,EAAYS,gBAAkB,MAC9BN,EAAYM,gBAAkB,MAC9BL,YAAW,WACPJ,EAAYS,gBAAkB,YAC9BN,EAAYM,gBAAkB,cAC/B1C,KAAK2C,MAAuB,GAAjBhB,MACfxB,EAAIwB,IApBFxB,EAAI,EAAGA,EAAIZ,EAAMC,OAAQW,IAAM,EAA/BA,G,YCIEyC,MANf,SAAoBC,GAChB,OACI,kBAACC,EAAA,EAASC,KAAV,CAAeC,GAAG,SAASC,QAASJ,EAAMK,IAAKL,EAAMM,Q,sBCkB9CC,MAjBf,SAAoBP,GAChB,OACI,yBAAKQ,UAAU,WACX,kBAACC,EAAA,EAAD,CAAgBC,GAAG,uBAAuBJ,MAAM,YAAYK,SAAUX,EAAMY,MACxE,kBAAC,EAAD,CAAYP,GAAI,WAAOL,EAAMa,YAAY,eAAgBP,MAAM,eAC/D,kBAAC,EAAD,CAAYD,GAAI,WAAOL,EAAMa,YAAY,eAAgBP,MAAM,eAC/D,kBAAC,EAAD,CAAYD,GAAI,WAAOL,EAAMa,YAAY,cAAeP,MAAM,cAC9D,kBAAC,EAAD,CAAYD,GAAI,WAAOL,EAAMa,YAAY,gBAAiBP,MAAM,iBAEpE,6BACI,kBAACQ,EAAA,EAAD,CAAQC,QAAQ,UAAUX,QAASJ,EAAMgB,QAASL,SAAUX,EAAMY,MAAlE,SAAuF,IACvF,kBAACE,EAAA,EAAD,CAAQC,QAAQ,YAAYX,QAASJ,EAAMiB,IAAKN,SAAUX,EAAMY,MAAhE,U,MCiHDM,MA3Hf,WAA6B,MAIKC,oBAAS,GAJd,mBAIlBC,EAJkB,KAITC,EAJS,OAKWF,mBAAS,IALpB,mBAKlBG,EALkB,KAKNC,EALM,OAMeJ,mBAAS,cANxB,mBAMlBK,EANkB,KAMJC,EANI,KA2BzB,SAASC,IAEL,IADA,IA2FWC,EAAKC,EA3FV9D,EAAM,GACJR,EAAI,EAAGA,EAAI,IAAKA,IACpBQ,EAAIH,MAyFGgE,EAzFY,EAyFPC,EAzFU,GA0FvBzE,KAAKC,MAAMD,KAAK0E,UAAYD,EAAMD,EAAO,GAAKA,KAxFjDJ,EAAczD,GAgDlB,SAASgE,EAAgBpF,EAAOoC,GAC5BU,YAAW,WACP6B,GAAW,KACZ3E,EAAMC,OAASmC,EAAiB,KAzEvCiD,qBAAU,WACFX,IA2BgB,eAAjBI,EAYN,WACG,IACM9E,EAAQsF,EAAkBV,IH5BjC,SAAwB5E,EAAOoC,GAClC,IADmD,IAAD,WACzCxB,GACL,IAAMyB,EAAYC,SAASC,uBAAuB,aAFJ,cAGPvC,EAAMY,GAAGG,WAHF,GAGxB0B,GAHwB,WAIxCI,EAAcR,EAAUM,KAAKF,GAAeG,MAClDE,YAAW,WAAO,IAAD,cACkB9C,EAAMY,GAAGI,KAD3B,GACNuE,EADM,KACKC,EADL,KAEP9C,EAAcL,EAAUkD,GAAW3C,MACzCF,EAAYQ,OAAZ,UAAwBsC,EAAxB,KACA9C,EAAYS,gBAAkB,MAC9BN,EAAYM,gBAAkB,MAC9BL,YAAW,WACPJ,EAAYS,gBAAkB,YAC9BN,EAAYM,gBAAkB,cAC/B1C,KAAK2C,MAAuB,GAAjBhB,MACfxB,EAAIwB,IAdFxB,EAAI,EAAGA,EAAIZ,EAAMC,OAAQW,IAAM,EAA/BA,IG4BL6E,CAAezF,EAFG,IAGlBoF,EAAgBpF,EAHE,IAZd0F,GACqB,eAAjBZ,EAiBZ,WACI,IACM9E,EAAQmB,EAAkByD,EAAY,EAAGA,EAAW3E,OAAS,GACnEkC,EAAanC,EAFK,IAGlBoF,EAAgBpF,EAHE,IAjBd2F,GACqB,cAAjBb,EAsBZ,WACI,IACM9E,EAAQ4B,EAAiBgD,GAC/BzC,EAAanC,EAFK,IAGlBoF,EAAgBpF,EAHE,IAtBd4F,GACqB,gBAAjBd,GA2BZ,WACI,IACM9E,EChFC,SAA4BoB,GACvC,IAAMpB,EAAQ,GACd,GAAGoB,EAAInB,QAAU,EAAG,OAAOmB,EAI3B,IAFA,IAAIyE,GAAU,EAENjF,EAAI,EAAGA,EAAIQ,EAAInB,OAAS,EAAGW,IAAK,CACpCiF,GAAU,EACV,IAAI,IAAIhF,EAAI,EAAGA,EAAIO,EAAInB,OAASW,EAAI,EAAGC,IAAK,CACxC,IAAMC,EAAO,GAGb,GAFAA,EAAKC,WAAa,CAACH,EAAGC,GACtBC,EAAKE,KAAO,KACTI,EAAIP,GAAKO,EAAIP,EAAI,GAAI,CACpB,IAAMa,EAASN,EAAIP,GACnBO,EAAIP,GAAKO,EAAIP,EAAI,GACjBO,EAAIP,EAAI,GAAKa,EACbZ,EAAKE,KAAO,CAACH,EAAGA,EAAI,GACpBb,EAAMiB,KAAKH,GACX+E,GAAU,GAIlB,IAAIA,EACA,MAGR,OAAO7F,EDsDW8F,CAAmBlB,GACjCzC,EAAanC,EAFK,GAGlBoF,EAAgBpF,EAHE,GA3Bd+F,OA/BRV,qBAAU,WACNL,MACD,IAwEH,IAAM3C,EACFuC,EAAWoB,KAAI,SAACC,EAAOC,GAAR,OACX,yBAAKpC,UAAU,YACXqC,IAAKD,EACLtD,MAAO,CAACM,OAAO,GAAD,OAAK+C,EAAL,WAO1B,OACI,6BACI,kBAAC,EAAD,CACI3B,QAASU,EACTb,YAAaY,EACbb,KAAMQ,EACNH,IArFZ,WACII,GAAW,MAsFP,yBAAKb,UAAU,YACf,mDAAyBgB,GACrB,yBAAKhB,UAAU,mBACVzB,ME9GN+D,MANf,WACE,OACI,kBAAC,EAAD,OCDNC,IAASC,OAAO,kBAAC,EAAD,MAAShE,SAASiE,eAAe,W","file":"static/js/main.e3f0b116.chunk.js","sourcesContent":["// Create and return animations array resulting from the merge sort algorithm\r\n\r\nexport default function mergeSort(array) {\r\n    const anims = [];\r\n    if (array.length <= 1) return array;\r\n    const auxArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxArray, anims)\r\n    return anims;\r\n}\r\n\r\nfunction mergeSortHelper (mainArray, startIdx, endIdx, auxArray, anims) {\r\n    if(startIdx === endIdx) return;\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxArray, startIdx, midIdx, mainArray, anims);\r\n    mergeSortHelper(auxArray, midIdx + 1, endIdx, mainArray, anims);\r\n    doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, anims);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, midIdx, endIdx, auxArray, anims) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = midIdx + 1;\r\n    while(i <= midIdx && j <= endIdx) {\r\n        const anim = {};\r\n        anim.comparison = [i, j];\r\n        if(auxArray[i] <= auxArray[j]) {\r\n            anim.swap = [k, auxArray[i]];\r\n            mainArray[k++] = auxArray[i++];\r\n        } else {\r\n            anim.swap = [k, auxArray[j]];\r\n            mainArray[k++] = auxArray[j++];\r\n        }\r\n        anims.push(anim);\r\n    }\r\n    while (i <= midIdx) {\r\n        anims.push({\r\n            comparison: [i, i],\r\n            swap: [k, auxArray[i]],\r\n        });\r\n        mainArray[k++] = auxArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        anims.push({\r\n            comparison: [j, j],\r\n            swap: [k, auxArray[j]],\r\n        });\r\n        mainArray[k++] = auxArray[j++];\r\n    }\r\n}","// Create and return animations array resulting from the quick sort algorithm\r\n\r\nexport default function getQuickSortAnims(arr, low, high) {\r\n    const anims = [];\r\n    if(arr.length <= 1) return arr;\r\n    quickSortHelper(arr, low, high, anims);\r\n    return anims;\r\n}\r\n\r\nfunction quickSortHelper(arr, low, high, anims) {\r\n    if(low < high) {\r\n        const partitionIndex = partition(arr, low, high, anims);\r\n        quickSortHelper(arr, low , partitionIndex - 1, anims);\r\n        quickSortHelper(arr, partitionIndex + 1, high, anims);\r\n    }\r\n}\r\n\r\nfunction partition(arr, low, high, anims){\r\n    let pivot = arr[high];\r\n    let i = low - 1;\r\n    for (let j = low; j < high; j++){\r\n        const anim = {};\r\n        anim.swap = null;\r\n        anim.comparison = [j, high];\r\n        if(arr[j] < pivot){\r\n            i++;\r\n            anim.swap = [i, j];\r\n            let holder = arr[i];\r\n            arr[i] = arr[j];\r\n            arr[j] = holder;\r\n        }\r\n        anims.push(anim);\r\n    }\r\n\r\n    const anim = {};\r\n    anim.comparison = [i + 1, high];\r\n    anim.swap = [i + 1, high];\r\n    anims.push(anim)\r\n\r\n    let holder = arr[i + 1];\r\n    arr[i + 1] = arr[high];\r\n    arr[high] = holder;\r\n    \r\n    return i + 1;\r\n}\r\n\r\n","// Create and return animations array resulting from the heap sort algorithm\r\n\r\nexport default function getHeapSortAnims(arr) {\r\n    const anims = [];\r\n    if(arr.length <= 1) return arr;\r\n    heapSortHelper(arr, anims);\r\n    return anims;\r\n}\r\n\r\nfunction heapSortHelper(arr, anims) {\r\n    const n = arr.length;\r\n\r\n    for(let i = n / 2 - 1; i >= 0; i--)\r\n        heapify(arr, n, i, anims);\r\n    \r\n    for(let i = n - 1; i > 0; i--){\r\n        const anim = {};\r\n        anim.comparison = [0, i];\r\n\r\n        let holder = arr[0];\r\n        anim.swap = [0, i];\r\n        arr[0] = arr[i];\r\n        arr[i] = holder;\r\n        anims.push(anim);\r\n\r\n        heapify(arr, i, 0, anims);\r\n    }\r\n}\r\n\r\nfunction heapify(arr, n, i, anims) {\r\n    let largest = i;\r\n    const l = 2 * i + 1;\r\n    const r = 2 * i + 2;\r\n\r\n    const anim = {};\r\n    anim.comparison = [0,0];\r\n    anim.swap = null;\r\n\r\n    if(l < n){\r\n\r\n        if(arr[l] > arr[largest])\r\n        largest = l;\r\n    }\r\n\r\n    if(r < n){\r\n\r\n        if(arr[r] > arr[largest])\r\n        largest = r;\r\n    }\r\n\r\n    if(largest !== i) {\r\n        const holder = arr[i];\r\n        anim.swap = [i, largest];\r\n        arr[i] = arr[largest];\r\n        arr[largest] = holder;\r\n\r\n        anims.push(anim);\r\n\r\n        heapify(arr, n, largest, anims);\r\n    }\r\n}\r\n\r\n","// Animation handling functions. Idea is to grab the array bars from the document by class name\r\n// Then use the passed animations arrays to applying styling. setTimeout is used to delay styling changes\r\n// Timeout delay is dependeny on the passed timeIncrements and is in milliseconds (ms)\r\n\r\n// runAnimation supports heapSort, quickSort and bubbleSort\r\n\r\nexport default function runAnimation(anims, timeIncrements) {\r\n    for (let i = 0; i < anims.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [barOneCompare, barTwoCompare] = anims[i].comparison;\r\n        let barOneStyle = arrayBars.item(barOneCompare).style;\r\n        let barTwoStyle = arrayBars.item(barTwoCompare).style;\r\n        setTimeout(() => {\r\n            if(anims[i].swap != null) {\r\n                const [barOneSwap, barTwoSwap] = anims[i].swap;\r\n                barOneStyle = arrayBars.item(barOneSwap).style;\r\n                barTwoStyle = arrayBars.item(barTwoSwap).style;\r\n                const temp = barOneStyle.height;\r\n                barOneStyle.height = barTwoStyle.height;\r\n                barTwoStyle.height = temp;\r\n            }\r\n            barOneStyle.backgroundColor = 'red';\r\n            barTwoStyle.backgroundColor = 'red';\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = 'lightblue';\r\n                barTwoStyle.backgroundColor = 'lightblue';\r\n            }, Math.round(timeIncrements * 0.6));\r\n        }, i * timeIncrements);\r\n    }\r\n} \r\n\r\n// runMSAnimation supports mergeSort\r\n\r\nexport function runMSAnimation(anims, timeIncrements) {\r\n    for (let i = 0; i < anims.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const [barOneCompare, barTwoCompare] = anims[i].comparison;\r\n        const barTwoStyle = arrayBars.item(barTwoCompare).style;\r\n        setTimeout(() => {\r\n            const [barOneIdx, newHeight] = anims[i].swap;\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}%`;\r\n            barOneStyle.backgroundColor = 'red';\r\n            barTwoStyle.backgroundColor = 'red';\r\n            setTimeout(() => {\r\n                barOneStyle.backgroundColor = 'lightblue';\r\n                barTwoStyle.backgroundColor = 'lightblue';\r\n            }, Math.round(timeIncrements * 0.6));\r\n        }, i * timeIncrements);\r\n    }\r\n} \r\n","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\n\r\n// Component for select algorithm dropdown items\r\n\r\nfunction AlgoButton(props) {\r\n    return(\r\n        <Dropdown.Item as=\"button\" onClick={props.fn}>{props.title}</Dropdown.Item>\r\n    );\r\n}\r\n\r\nexport default AlgoButton;","import React from 'react';\r\nimport AlgoButton from './AlgoButton';\r\nimport Button from 'react-bootstrap/Button';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport './Navigation.css';\r\n\r\n// Full navigation bar component with Select Algorithm dropdown bar, Reset button and Run button\r\n\r\nfunction Navigation(props) {\r\n    return(\r\n        <div className=\"nav-bar\">\r\n            <DropdownButton id=\"dropdown-item-button\" title=\"Algorithm\" disabled={props.busy}>\r\n                <AlgoButton fn={() => {props.updateState(\"merge-sort\")}} title=\"Merge Sort\" />\r\n                <AlgoButton fn={() => {props.updateState(\"quick-sort\")}} title=\"Quick Sort\" />\r\n                <AlgoButton fn={() => {props.updateState(\"heap-sort\")}} title=\"Heap Sort\" />\r\n                <AlgoButton fn={() => {props.updateState(\"bubble-sort\")}} title=\"Bubble Sort\" />\r\n            </DropdownButton>\r\n            <div>\r\n                <Button variant=\"primary\" onClick={props.refresh} disabled={props.busy}>Reset</Button>{' '}\r\n                <Button variant=\"secondary\" onClick={props.run} disabled={props.busy}>Run</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import React, { useState, useEffect } from 'react';\r\nimport getMergeSortAnims from '../../sortingAlgorithms/mergeSort.js';\r\nimport getQuickSortAnims from '../../sortingAlgorithms/quickSort.js';\r\nimport getHeapSortAnims from '../../sortingAlgorithms/heapSort.js';\r\nimport getBubbleSortAnims from '../../sortingAlgorithms/bubbleSort.js';\r\nimport runAnimation, { runMSAnimation } from './AnimationHandler.js';\r\nimport Navigation from '../nav/Navigation';\r\nimport './SortingVisualizer.css';\r\n\r\nfunction SortingVisualizer() {\r\n\r\n    // State variables\r\n\r\n    const [sorting, setSorting] = useState(false);\r\n    const [sortingArr, setSortingArr] = useState([]);\r\n    const [sortingState, setSortingState] = useState(\"merge-sort\");\r\n\r\n    // Hooks for starting sorting and generating a new array on load\r\n\r\n    useEffect(() => {\r\n        if (sorting) runSort();  \r\n    });\r\n\r\n    useEffect(() => {\r\n        generateArray();\r\n    }, []);\r\n\r\n    // Handles run button click action\r\n\r\n    function handleRun() { \r\n        setSorting(true);\r\n    };\r\n\r\n    // Generate a new 200 element array with random values from 3 to 98\r\n    // Update state array\r\n\r\n    function generateArray() {\r\n        const arr = [];\r\n        for(let i = 0; i < 200; i++) {\r\n            arr.push(randomInt(3, 98));\r\n        }\r\n        setSortingArr(arr);\r\n    };\r\n\r\n    // Run the algorithm corresponding to the current sorting state\r\n\r\n    function runSort() {\r\n        if(sortingState === \"merge-sort\")\r\n            runMergeSort();\r\n        else if(sortingState === \"quick-sort\")\r\n            runQuickSort();\r\n        else if(sortingState === \"heap-sort\")\r\n            runHeapSort();\r\n        else if(sortingState === \"bubble-sort\")\r\n            runBubbleSort();\r\n    };\r\n\r\n    // Functions to run and create animations for the specified sorting algorithms\r\n\r\n     function runMergeSort() {\r\n        const animSpeed = 18;\r\n        const anims = getMergeSortAnims(sortingArr);\r\n        runMSAnimation(anims, animSpeed);\r\n        startResetTimer(anims, animSpeed);\r\n    } \r\n\r\n    function runQuickSort() {\r\n        const animSpeed = 18;\r\n        const anims = getQuickSortAnims(sortingArr, 0, sortingArr.length - 1);\r\n        runAnimation(anims, animSpeed);\r\n        startResetTimer(anims, animSpeed);\r\n    }\r\n\r\n    function runHeapSort() {\r\n        const animSpeed = 18;\r\n        const anims = getHeapSortAnims(sortingArr);\r\n        runAnimation(anims, animSpeed);\r\n        startResetTimer(anims, animSpeed);\r\n    }\r\n\r\n    function runBubbleSort() {\r\n        const animSpeed = 2;\r\n        const anims = getBubbleSortAnims(sortingArr);\r\n        runAnimation(anims, animSpeed);\r\n        startResetTimer(anims, animSpeed);\r\n    }\r\n\r\n    // Reset timer resets the screen buttoms after the sorting algorithm animations are completed\r\n\r\n    function startResetTimer(anims, timeIncrements){\r\n        setTimeout(() => {\r\n            setSorting(false);\r\n        }, anims.length * timeIncrements + 600);\r\n    }\r\n\r\n    // arrayBars generated by mapping the values in the current states sorting array\r\n\r\n    const arrayBars = (\r\n        sortingArr.map((value, idx) => (\r\n            <div className=\"array-bar\" \r\n                key={idx}\r\n                style={{height: `${value}%`}}>\r\n            </div>\r\n        ))\r\n    );\r\n\r\n    // Render\r\n\r\n    return (\r\n        <div>\r\n            <Navigation \r\n                refresh={generateArray}\r\n                updateState={setSortingState}\r\n                busy={sorting}\r\n                run={handleRun}\r\n            />\r\n            <div className=\"main-nav\">\r\n            <h1>Selected Algorithm: {sortingState}</h1>\r\n                <div className=\"array-container\">\r\n                    {arrayBars}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Generate a random integer between the value of min and max\r\n\r\nfunction randomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min +  1) + min)\r\n} \r\n\r\nexport default SortingVisualizer;\r\n","// Create and return animations array resulting from the bubble sort algorithm\r\n\r\nexport default function getBubbleSortAnims(arr) {\r\n    const anims = [];\r\n    if(arr.length <= 1) return arr;\r\n\r\n    let swapped = false;\r\n\r\n    for(let i = 0; i < arr.length - 1; i++) {\r\n        swapped = false;\r\n        for(let j = 0; j < arr.length - i - 1; j++) {\r\n            const anim = {};\r\n            anim.comparison = [i, j];\r\n            anim.swap = null;\r\n            if(arr[j] > arr[j + 1]) {\r\n                const holder = arr[j];\r\n                arr[j] = arr[j + 1];\r\n                arr[j + 1] = holder;\r\n                anim.swap = [j, j + 1];\r\n                anims.push(anim);\r\n                swapped = true;\r\n            }\r\n        }\r\n\r\n        if(!swapped)\r\n            break;\r\n\r\n    }\r\n    return anims;\r\n}\r\n","import React from 'react';\nimport SortingVisualizer from './components/visualizer/SortingVisualizer';\n\nfunction App() {\n  return (\n      <SortingVisualizer />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}